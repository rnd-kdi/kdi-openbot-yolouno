import ubluetooth
import time

# --- HẰNG SỐ CẤU HÌNH ---

# Tên sẽ hiển thị khi quét tìm thiết bị Bluetooth.
_DEVICE_NAME = 'OpenBot-ESP32'

# Định nghĩa các UUID cần thiết cho giao thức OpenBot
# UUID được biểu diễn dưới dạng đối tượng UUID của ubluetooth
_UART_SERVICE_UUID = ubluetooth.UUID("61653dc3-4021-4d1e-ba83-8b4eec61d613")
# Đặc tính để nhận dữ liệu từ app (App -> ESP32)
_RX_CHAR_UUID = ubluetooth.UUID("06386c14-86ea-4d71-811c-48f97c58f8c9")
# Đặc tính để gửi dữ liệu đến app (ESP32 -> App)
_TX_CHAR_UUID = ubluetooth.UUID("9bf1103b-834c-47cf-b149-c9e4bcf778a7")


# --- XÂY DỰNG CÁC GÓI TIN QUẢNG BÁ ---

# Gói tin quảng bá chính (chứa UUID dịch vụ)
_ADV_PAYLOAD = bytearray()
_ADV_PAYLOAD += b'\x02\x01\x06' # Cờ (Flags)
_ADV_PAYLOAD += b'\x11\x07' # Báo hiệu UUID dịch vụ 128-bit đầy đủ
# SỬA LỖI: Xóa ".bin" vì đối tượng UUID có thể được dùng trực tiếp
_ADV_PAYLOAD += _UART_SERVICE_UUID # Thêm UUID dưới dạng bytes

# Gói tin phản hồi quét (chứa tên thiết bị)
_SCAN_RSP_PAYLOAD = bytearray()
name_bytes = _DEVICE_NAME.encode('utf-8')
_SCAN_RSP_PAYLOAD += bytes([len(name_bytes) + 1, 0x09])
_SCAN_RSP_PAYLOAD += name_bytes


# --- LỚP QUẢN LÝ BLE ---

class BLE_Manager:
    def __init__(self, ble):
        self._ble = ble
        self._ble.active(True)
        self._ble.irq(self._irq) # Đăng ký hàm xử lý sự kiện
        
        # Định nghĩa cấu trúc dịch vụ và đặc tính
        uart_service = (_UART_SERVICE_UUID, ((_TX_CHAR_UUID, ubluetooth.FLAG_NOTIFY), (_RX_CHAR_UUID, ubluetooth.FLAG_WRITE),))
        services = (uart_service,)
        
        # Đăng ký dịch vụ và lấy về các "handle" (định danh nội bộ)
        ((self._tx_handle, self._rx_handle),) = self._ble.gatts_register_services(services)
        
        self._connections = set()
        self._write_callback = None
        
        self._advertise()

    def _irq(self, event, data):
        # Theo dõi các sự kiện ngắt từ BLE stack
        
        if event == 1: # _IRQ_CENTRAL_CONNECT
            conn_handle, _, _ = data
            print("Đã kết nối thành công, connection handle:", conn_handle)
            self._connections.add(conn_handle)
            self._ble.gap_advertise(None) # Dừng quảng bá khi đã có kết nối

        elif event == 2: # _IRQ_CENTRAL_DISCONNECT
            conn_handle, _, _ = data
            print("Đã ngắt kết nối, connection handle:", conn_handle)
            self._connections.remove(conn_handle)
            # Bắt đầu quảng bá lại để cho phép kết nối mới
            self._advertise()

        elif event == 3: # _IRQ_GATTS_WRITE
            conn_handle, value_handle = data
            # Nếu có dữ liệu được ghi vào đúng đặc tính RX
            if conn_handle in self._connections and value_handle == self._rx_handle:
                # Đọc dữ liệu và gọi callback
                received_data = self._ble.gatts_read(self._rx_handle)
                if self._write_callback:
                    self._write_callback(received_data)

    def on_write(self, callback):
        """Đăng ký một hàm để xử lý khi có dữ liệu được gửi đến."""
        self._write_callback = callback
        
    def _advertise(self):
        print("Bắt đầu quảng bá...")
        self._ble.gap_advertise(100000, adv_data=_ADV_PAYLOAD, resp_data=_SCAN_RSP_PAYLOAD)


# --- HÀM CHÍNH ---

def main():
    print("Đang khởi tạo Bluetooth...")
    ble = ubluetooth.BLE()
    ble_manager = BLE_Manager(ble)

    def on_rx(data):
        """Hàm được gọi mỗi khi có dữ liệu mới từ app."""
        try:
            # In dữ liệu nhận được ra console
            print("Dữ liệu nhận được:", data.decode('utf-8').strip())
        except UnicodeError:
            print("Dữ liệu nhận được (dạng bytes):", data)

    # Đăng ký hàm on_rx để xử lý dữ liệu
    ble_manager.on_write(on_rx)

    print("\nThiết bị đã sẵn sàng. Mở ứng dụng OpenBot để kết nối.")
    print("Nhấn Ctrl+C để dừng chương trình.")

    # Giữ chương trình chạy
    while True:
        time.sleep_ms(1000)

# --- CHẠY CHƯƠNG TRÌNH ---
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nĐã dừng chương trình.")
    except Exception as e:
        print(f"Đã xảy ra lỗi: {e}")

